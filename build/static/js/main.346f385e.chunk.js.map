{"version":3,"sources":["components/template.jsx","components/meme.jsx","App.jsx","index.js"],"names":["Template","templates","setMeme","className","map","template","onClick","style","backgroundImage","url","id","Meme","meme","useState","tempelate_id","username","password","boxes","form","setForm","src","alt","Array","box_count","_","index","type","placeholder","onChange","e","newBoxes","text","target","value","box","console","log","fetch","then","res","json","data","App","setTemplates","useEffect","memes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qLAuBeA,EArBE,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,UAAWC,EAAc,EAAdA,QAC3B,OAEI,qBAAKC,UAAU,WAAf,SACKF,EAAUG,KAAI,SAACC,GAAD,OACX,qBAEIC,QAAS,WACLJ,EAAQG,IAHhB,SAMI,qBACIE,MAAO,CAAEC,gBAAgB,OAAD,OAASH,EAASI,IAAlB,MACxBN,UAAU,WAPTE,EAASK,U,cCoCnBC,EA1CF,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,KAAMV,EAAc,EAAdA,QAClB,EAAwBW,mBAAS,CAC7BC,aAAcF,EAAKF,GACnBK,SAAU,GACVC,SAAU,mBACVC,MAAO,KAJX,mBAAOC,EAAP,KAAaC,EAAb,KAgBA,OACI,sBAAKhB,UAAU,OAAf,UACI,qBAAKiB,IAAKR,EAAKH,IAAKY,IAAI,SACxB,8BACK,YAAIC,MAAMV,EAAKW,YAAYnB,KAAI,SAACoB,EAAGC,GAAJ,OAC5B,uBAEIC,KAAK,OACLC,YAAW,uBAAkBF,EAAQ,GACrCG,SAAU,SAACC,GACP,IAAMC,EAAWZ,EAAKD,MACtBa,EAASL,GAAS,CAAEM,KAAMF,EAAEG,OAAOC,OACnCd,EAAQ,2BAAKD,GAAN,IAAYD,MAAOa,OANzBL,QAWjB,gCACI,wBAAQnB,QA5BC,WACjB,IAAIG,EAAG,4DAAwDS,EAAKJ,aAA7D,qBAAsFI,EAAKH,SAA3F,qBAAgHG,EAAKF,UAC5HE,EAAKD,MAAMb,KAAI,SAAC8B,EAAKT,GACjBhB,GAAG,iBAAcgB,EAAd,mBAA8BS,EAAIH,SAEzCI,QAAQC,IAAI3B,GACZ4B,MAAM5B,GACD6B,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OAAUvC,EAAQ,2BAAKU,GAAN,IAAYH,IAAKgC,EAAKA,KAAKhC,WAoB9C,2BACA,wBAAQH,QAAS,kBAAMJ,EAAQ,OAA/B,oCCXDwC,MAtBf,WACC,MAAkC7B,mBAAS,IAA3C,mBAAOZ,EAAP,KAAkB0C,EAAlB,KACA,EAAwB9B,mBAAS,MAAjC,mBAAOD,EAAP,KAAaV,EAAb,KAQA,OAPA0C,qBAAU,WACTP,MAAM,qCACJC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACNE,EAAaF,EAAKA,KAAKI,YAEvB,IAEF,sBAAK1C,UAAU,MAAf,UACC,gDACU,OAATS,EACA,cAAC,EAAD,CAAUX,UAAWA,EAAWC,QAASA,IAEzC,cAAC,EAAD,CAAMU,KAAMA,EAAMV,QAASA,QChB/B4C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.346f385e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Template = ({ templates, setMeme }) => {\r\n    return (\r\n                   \r\n        <div className=\"template\">\r\n            {templates.map((template) => (\r\n                <div\r\n                    key={template.id}\r\n                    onClick={() => {\r\n                        setMeme(template);\r\n                    }}\r\n                >\r\n                    <div\r\n                        style={{ backgroundImage: `url(${template.url})` }}\r\n                        className=\"image\"\r\n                    ></div>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Template;","import React from \"react\";\r\nimport { useState } from \"react\";\r\nconst Meme = ({ meme, setMeme }) => {\r\n    const [form, setForm] = useState({\r\n        tempelate_id: meme.id,\r\n        username: \"\",\r\n        password: \"$msX-{{6Tx[ja7*m\",\r\n        boxes: [],\r\n    });\r\n    const generateMeme = () => {\r\n        let url = `https://api.imgflip.com/caption_image?template_id=${form.tempelate_id}&username=${form.username}&password=${form.password}`;\r\n        form.boxes.map((box, index) => {\r\n            url += `&boxes[${index}][text]=${box.text}`;\r\n        });\r\n        console.log(url);\r\n        fetch(url)\r\n            .then((res) => res.json())\r\n            .then((data) => setMeme({ ...meme, url: data.data.url }));\r\n    };\r\n    return (\r\n        <div className=\"meme\">\r\n            <img src={meme.url} alt=\"meme\" />\r\n            <div>\r\n                {[...Array(meme.box_count)].map((_, index) => (\r\n                    <input\r\n                        key={index}\r\n                        type=\"text\"\r\n                        placeholder={`Meme Caption ${index + 1}`}\r\n                        onChange={(e) => {\r\n                            const newBoxes = form.boxes;\r\n                            newBoxes[index] = { text: e.target.value };\r\n                            setForm({ ...form, boxes: newBoxes });\r\n                        }}\r\n                    />\r\n                ))}\r\n            </div>\r\n            <div>\r\n                <button onClick={generateMeme}>Generate Meme</button>\r\n                <button onClick={() => setMeme(null)}>Choose Template</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Meme;","import React,{ useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Template from \"./components/template\";\nimport Meme from \"./components/meme\";\n\nfunction App() {\n\tconst [templates, setTemplates] = useState([]);\n\tconst [meme, setMeme] = useState(null);\n\tuseEffect(() => {\n\t\tfetch(\"https://api.imgflip.com/get_memes\")\n\t\t\t.then((res) => res.json())\n\t\t\t.then((data) => {\n\t\t\t\tsetTemplates(data.data.memes);\n\t\t\t});\n\t}, []);\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<h1>Meme Generator</h1>\n\t\t\t{meme === null ? (\n\t\t\t\t<Template templates={templates} setMeme={setMeme} />\n\t\t\t) : (\n\t\t\t\t<Meme meme={meme} setMeme={setMeme} />\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}